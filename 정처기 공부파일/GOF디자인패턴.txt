
생성 패턴 \객체의 인스턴스 생성에 관여하고 클래스 정의와 객체 생성 방식을 구조화, 캡슐화하는 패턴
Builder\생성 단계를 캡슐화 해서 구축 공정을 동일하게 이용하도록 하는 패턴
Prototype\기존 객체를 복제해서 새 객체를 생성할 수 있도록 하는 패턴
Factory Method\상위 클래스에서 객체를 생성하는 인터페이스를 정의하고 하위 클래스에서 인스턴스를 생성하는 패턴
Abstract Factory\생성군들을 하나에 모아놓고 팩토리 중에서 선택하게 하는 패턴
Singgleton\유일한 하나의 인스턴스를 보장하도록 하는 패턴

구조패턴\ 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
Bridge\추상과 구현을 분리해서 결합도를 낮춘 패턴
Decorator\소스를 변경하지 않고 기능을 확장하는 패턴
Facade\하나의 인터페이스를 통해 느슨한 결합을 제공하는 패턴
Flyweight\대량의 작은 객체들을 공유하는 패턴
Proxy\대리인이 대신 그 일을 처리하는 패턴
Composite\개별 객체와 복합 객체를 클라이언트에서 동일하게 사용하도록 하는 패턴
Adapter\인터페이스로 인해 함께 사용하지 못하는 클래스를 함께 사용하도록 하는 패턴

행위패턴\ 클래스와 객체들이 상호작용하는 방법과 역할을 분담하는 방법을 다루는 패턴
Interpreter\언어 규칙 클래스를 이용하는 패턴
Templete Method\알고리즘 골격의 구조를 정의한 패턴
Chain of Responsibility\객체끼리 연결 고리를 만들어 내부적으로 전달하는 패턴
Command\요청 자체를 캡슐화해 파라미터로 넘기는 패턴
Iterator\내부 표현은 보여주지 않고 순회하는 패턴
Mediator\객체 간 상호작용을 캡슐화한 패턴
Memento\상태 값을 미리 저장해두었다가 복구하는 패턴
Observer\상태가 변할 때 의존자들에게 알리고 자동으로 업데이트하는 패턴
State\객체 내부 상태에 따라서 행위를 변경하는 패턴
Strategy\다양한 알고리즘을 캡슐화해 알고리즘 대체가 가능하도록 하는 패턴
Visitor\호스트에 객체의 내부 상태에 접근할 수 있는 방법을 제공, 호스트 객체 연산 추가